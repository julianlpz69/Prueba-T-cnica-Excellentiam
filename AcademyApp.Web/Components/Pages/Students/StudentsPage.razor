@page "/students"
@inject IStudentService StudentSvc
@inject NavigationManager Nav
@using AcademyApp.Application.Pagination
@rendermode InteractiveServer

<h3>Students</h3>

<div class="mb-3">
    <input placeholder="Search by name..." @bind="Search" />
    <button class="btn btn-primary" @onclick="SearchStudents">Search</button>
    <a class="btn btn-success" href="/students/new">New Student</a>

    <a class="btn btn-dark"
       href="@($"/export/students.xlsx?{BuildExportQuery()}")">
        Export to Excel
    </a>

</div>


@if (Data.Count == 0)
{
    <p>No data found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th @onclick="@(() => Sort("fullname"))">Full name @(SortIcon("fullname"))</th>
                <th @onclick="@(() => Sort("age"))">Age @(SortIcon("age"))</th>
                <th @onclick="@(() => Sort("status"))">Status @(SortIcon("status"))</th>
                <th @onclick="@(() => Sort("enrollmentdate"))">Enrolled @(SortIcon("enrollmentdate"))</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in Data)
            {
                <tr>
                    <td>@s.FullName</td>
                    <td>@s.Age</td>
                    <td>@s.Status</td>
                    <td>@s.EnrollmentDate.ToShortDateString()</td>
                    <td>
                        <button type="button" class="btn btn-sm btn-warning" @onclick="() => Edit(s.Id)">Edit</button>
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => Delete(s.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between">
        <button class="btn btn-secondary" @onclick="PrevPage" disabled="@(!CanPrev)">Previous</button>
        <span>Page @Page of @TotalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanNext)">Next</button>
    </div>
}

@code {
    private int CourseId;

    private int Page = 1, PageSize = 10, Total;
    private bool Desc;
    private string? SortBy;
    private string? Search;
    private List<StudentDto> Data = new();

    private string? Error;

    private int TotalPages => (int)Math.Ceiling((double)Total / PageSize);
    private bool CanPrev => Page > 1;
    private bool CanNext => Page < TotalPages;

    protected override async Task OnInitializedAsync()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var qs = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (qs.TryGetValue("courseId", out var v) && int.TryParse(v, out var cid))
            CourseId = cid;

        await Load();
    }

    private async Task Load()
    {
        try
        {
            if (CourseId > 0)
            {
                var result = await StudentSvc.GetByCourseAsync(CourseId, new QueryParams(Page, PageSize, SortBy, Desc, Search));
                Data = result.Items.ToList();
                Total = result.Total;
            }
            else
            {
                var result = await StudentSvc.GetAsync(new QueryParams(Page, PageSize, SortBy, Desc, Search));
                Data = result.Items.ToList();
                Total = result.Total;
            }

            Error = null;
        }
        catch (Exception ex)
        {
            Error = ex.Message;
        }
    }


    private async Task SearchStudents()
    {
        Page = 1;
        await Load();
    }

    private void Sort(string key)
    {
        if (SortBy == key) Desc = !Desc;
        else { SortBy = key; Desc = false; }
        _ = Load();
    }

    private string SortIcon(string key)
    {
        if (SortBy != key) return "";
        return Desc ? "↓" : "↑";
    }

    private void PrevPage()
    {
        if (CanPrev) { Page--; _ = Load(); }
    }

    private void NextPage()
    {
        if (CanNext) { Page++; _ = Load(); }
    }

    private void New()
    {
        if (CourseId > 0)
            Nav.NavigateTo($"/students/new?courseId={CourseId}");
    }

    private void Edit(int id)
    {
        Nav.NavigateTo($"/students/edit/{id}?courseId={CourseId}");
    }

    private async Task Delete(int id)
    {
        try
        {
            await StudentSvc.DeleteAsync(id);
            await Load(); 
        }
        catch (Exception ex)
        {
            Error = $"Failed to delete student: {ex.Message}";
        }
    }


    private string BuildExportQuery()
    {
        var query = new List<string>();

        if (CourseId > 0)
            query.Add($"courseId={CourseId}");

        if (!string.IsNullOrWhiteSpace(Search))
            query.Add($"search={Uri.EscapeDataString(Search)}");

        if (!string.IsNullOrEmpty(SortBy))
            query.Add($"sortBy={SortBy}");

        query.Add($"desc={Desc.ToString().ToLower()}");

        query.Add($"pageSize={PageSize}");

        return string.Join("&", query);
    }
}
